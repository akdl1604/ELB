// VAT_SimulatorDlg.cpp: 구현 파일
//


#include "stdafx.h"
#include "LET_AlignClient.h"
#include "LET_AlignClientDlg.h"
#include "VAT_SimulatorDlg.h"
#include "afxdialogex.h"
// CVAT_SimulatorDlg 대화 상자
#include <fstream>
#include "OnscreenKeyboardDlg.h"
#include "VirtualKeyBoard/VirtualKeyBoard.h"

IMPLEMENT_DYNAMIC(CVAT_SimulatorDlg, CDialogEx)

CVAT_SimulatorDlg::CVAT_SimulatorDlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_DIALOG_SDV_VAT_SIMULATOR, pParent)
{
	m_pImage = NULL;
}

CVAT_SimulatorDlg::~CVAT_SimulatorDlg()
{
	if (!m_pImage.empty())   m_pImage.release();

	m_vEQPList.clear();
	m_vPosNameList.clear();
}

void CVAT_SimulatorDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);

	DDX_Control(pDX, IDC_LB_VIEW_TITLE, m_LbViewTitle);
	DDX_Control(pDX, IDC_LB_CONNECT_STATUS, m_LbConnectStatus);
	DDX_Control(pDX, IDC_LB_MODEL, m_LbModelTitle);
	DDX_Control(pDX, IDC_LB_POS_NAME, m_LbPosNamelTitle);
	DDX_Control(pDX, IDC_LB_EQP_NAME, m_LbEqpNameTitle);
	DDX_Control(pDX, IDC_LB_DLTIMEOUT, m_LbDllTitle);
	DDX_Control(pDX, IDC_LB_MC_TIMEOUT, m_LbMcTitle);
	DDX_Control(pDX, IDC_LB_ATT_TIMEOUT, m_LbAttTitle);

	DDX_Control(pDX, IDC_BUTTON_CONNECT, m_btnConnect);
	DDX_Control(pDX, IDC_BUTTON_DISCONNECT, m_btnDisconnect);
	DDX_Control(pDX, IDC_BUTTON_REQDLAGENT, m_btnReqdlagent);
	DDX_Control(pDX, IDC_BUTTON_REQMODELDATA_COPY, m_btnReqmodeldataCopy);
	DDX_Control(pDX, IDC_BUTTON_REPORTMANUAL_RST, m_btnReportmanualRst);
	DDX_Control(pDX, IDC_BUTTON_REPORTLOGIC_RST, m_btnReportlogicRst);
	DDX_Control(pDX, IDC_BUTTON_REQUPDATE_ATT, m_btnRequpdateAtt);
	DDX_Control(pDX, IDC_BUTTON_REPORT_ALLRST, m_btnReportAllrst);
	DDX_Control(pDX, IDC_BUTTON_GETEQP_LIST, m_btnGeteqpList);
	DDX_Control(pDX, IDC_BUTTON_GETPOS_LIST, m_btnGetposList);
	DDX_Control(pDX, IDC_BUTTON_MONITOR_LOG, m_btnMonitorLog);
	DDX_Control(pDX, IDC_BUTTON_IMAGE_LOAD, m_btnImageLoad);
	DDX_Control(pDX, IDC_BUTTON_CLEAR_LOG, m_btnClearLog);
	DDX_Control(pDX, IDC_BUTTON_COPY_CANCLE, m_btnCancel);

	DDX_Control(pDX, IDC_EDIT_MODEL, m_edtModel);
	DDX_Control(pDX, IDC_EDIT_DLTIMEOUT, m_edtDLTimeOut);
	DDX_Control(pDX, IDC_EDIT_MCTIMEOUT, m_edtMCTimeOut);
	DDX_Control(pDX, IDC_EDIT_ATTTIMEOUT, m_edtATTTimeOut);

	DDX_Control(pDX, IDC_COMBO_POSNAME, m_cmbSelectPosName);
	DDX_Control(pDX, IDC_COMBO_EQPNAME, m_cmbSelectEqpName);
	DDX_Control(pDX, IDC_LIST_LOG, m_listLog);
}


BEGIN_MESSAGE_MAP(CVAT_SimulatorDlg, CDialogEx)
	ON_WM_CTLCOLOR()
	ON_BN_CLICKED(IDC_BUTTON_CONNECT, &CVAT_SimulatorDlg::OnBnClickedButtonConnect)
	ON_BN_CLICKED(IDC_BUTTON_DISCONNECT, &CVAT_SimulatorDlg::OnBnClickedButtonDisconnect)
	ON_BN_CLICKED(IDC_BUTTON_REQDLAGENT, &CVAT_SimulatorDlg::OnBnClickedButtonReqdlagent)
	ON_BN_CLICKED(IDC_BUTTON_REQMODELDATA_COPY, &CVAT_SimulatorDlg::OnBnClickedButtonReqmodeldataCopy)
	ON_BN_CLICKED(IDC_BUTTON_REPORTMANUAL_RST, &CVAT_SimulatorDlg::OnBnClickedButtonReportmanualRst)
	ON_BN_CLICKED(IDC_BUTTON_REPORTLOGIC_RST, &CVAT_SimulatorDlg::OnBnClickedButtonReportlogicRst)
	ON_BN_CLICKED(IDC_BUTTON_REQUPDATE_ATT, &CVAT_SimulatorDlg::OnBnClickedButtonRequpdateAtt)
	ON_BN_CLICKED(IDC_BUTTON_REPORT_ALLRST, &CVAT_SimulatorDlg::OnBnClickedButtonReportAllrst)
	ON_BN_CLICKED(IDC_BUTTON_GETEQP_LIST, &CVAT_SimulatorDlg::OnBnClickedButtonGeteqpList)
	ON_BN_CLICKED(IDC_BUTTON_GETPOS_LIST, &CVAT_SimulatorDlg::OnBnClickedButtonGetposList)
	ON_BN_CLICKED(IDC_BUTTON_MONITOR_LOG, &CVAT_SimulatorDlg::OnBnClickedButtonMonitorLog)
	ON_BN_CLICKED(IDC_BUTTON_IMAGE_LOAD, &CVAT_SimulatorDlg::OnBnClickedButtonImageLoad)
	ON_BN_CLICKED(IDC_BUTTON_CLEAR_LOG, &CVAT_SimulatorDlg::OnBnClickedButtonClearLog)
	ON_EN_SETFOCUS(IDC_EDIT_MODEL, &CVAT_SimulatorDlg::OnEnSetfocusEditModel)
	ON_EN_SETFOCUS(IDC_EDIT_DLTIMEOUT, &CVAT_SimulatorDlg::OnEnSetfocusEditDltimeout)
	ON_EN_SETFOCUS(IDC_EDIT_MCTIMEOUT, &CVAT_SimulatorDlg::OnEnSetfocusEditMctimeout)
	ON_EN_SETFOCUS(IDC_EDIT_ATTTIMEOUT, &CVAT_SimulatorDlg::OnEnSetfocusEditAtttimeout)
	ON_WM_TIMER()
	ON_BN_CLICKED(IDC_BUTTON_COPY_CANCLE, &CVAT_SimulatorDlg::OnBnClickedButtonCopyCancle)
	ON_WM_CLOSE()
END_MESSAGE_MAP()


// CVAT_SimulatorDlg 메시지 처리기

BOOL CVAT_SimulatorDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	m_hbrBkg = CreateSolidBrush(COLOR_UI_BODY);
	m_pMain = (CLET_AlignClientDlg*)AfxGetMainWnd();

	InitTitle(&m_LbViewTitle, "SDV VAT Simulator Check", 24.f, COLOR_UI_BODY);
	InitTitle(&m_LbConnectStatus, "Connect / DisConnect", 18.f, COLOR_UI_BODY);
	InitTitle(&m_LbModelTitle, "Model", 14.f, COLOR_UI_BODY);
	InitTitle(&m_LbPosNamelTitle, "Pos Name", 14.f, COLOR_UI_BODY);
	InitTitle(&m_LbEqpNameTitle, "EQP Name", 14.f, COLOR_UI_BODY);
	InitTitle(&m_LbDllTitle, "DL Timeout", 14.f, COLOR_UI_BODY);
	InitTitle(&m_LbMcTitle, "MC Timeout", 14.f, COLOR_UI_BODY);
	InitTitle(&m_LbAttTitle, "ATT Timeout", 14.f, COLOR_UI_BODY);

	MainButtonInit(&m_btnConnect);          m_btnConnect.SetSizeText(14.f);
	MainButtonInit(&m_btnDisconnect);       m_btnDisconnect.SetSizeText(14.f);
	MainButtonInit(&m_btnReqdlagent);       m_btnReqdlagent.SetSizeText(14.f);
	MainButtonInit(&m_btnReqmodeldataCopy); m_btnReqmodeldataCopy.SetSizeText(14.f);
	MainButtonInit(&m_btnReportmanualRst);  m_btnReportmanualRst.SetSizeText(14.f);
	MainButtonInit(&m_btnReportlogicRst);   m_btnReportlogicRst.SetSizeText(14.f);
	MainButtonInit(&m_btnRequpdateAtt);     m_btnRequpdateAtt.SetSizeText(14.f);
	MainButtonInit(&m_btnReportAllrst);     m_btnReportAllrst.SetSizeText(14.f);
	MainButtonInit(&m_btnGeteqpList);       m_btnGeteqpList.SetSizeText(14.f);
	MainButtonInit(&m_btnGetposList);       m_btnGetposList.SetSizeText(14.f);
	MainButtonInit(&m_btnMonitorLog);       m_btnMonitorLog.SetSizeText(14.f);
	MainButtonInit(&m_btnImageLoad);        m_btnImageLoad.SetSizeText(14.f);
	MainButtonInit(&m_btnClearLog);         m_btnClearLog.SetSizeText(14.f);
	MainButtonInit(&m_btnCancel);           m_btnCancel.SetSizeText(14.f);	

	GetDlgItem(IDC_EDIT_MODEL)->SetWindowText("AMF755ZE01");
	GetDlgItem(IDC_EDIT_DLTIMEOUT)->SetWindowText("5000");
	GetDlgItem(IDC_EDIT_MCTIMEOUT)->SetWindowText("5000");
	GetDlgItem(IDC_EDIT_ATTTIMEOUT)->SetWindowText("6000");
	
	InitEQPList();
	InitPosList();

	m_listLog.AddString("SDV VAT Program Start");

#ifdef _SDV_VAT
	KillTimer(1);
	SetTimer(1, 1000, NULL);
#endif

	return TRUE;  // return TRUE unless you set the focus to a control
					  // 예외: OCX 속성 페이지는 FALSE를 반환해야 합니다.
}

void CVAT_SimulatorDlg::InitTitle(CLabelEx* pTitle, CString str, float size, COLORREF color)
{
	pTitle->SetAlignTextCM();
	pTitle->SetSizeText(size);
	pTitle->SetColorBkg(255, color);
	pTitle->SetColorBorder(255, COLOR_DDARK_GRAY);
	pTitle->SetText(str);
	pTitle->ModifyStyleEx(WS_EX_CLIENTEDGE, 0, SWP_DRAWFRAME | SWP_FRAMECHANGED);
}


void CVAT_SimulatorDlg::MainButtonInit(CButtonEx* pbutton, int size)
{
	pbutton->SetEnable(true);
	pbutton->SetColorBkg(255, RGB(64, 64, 64));
	pbutton->SetColorBorder(255, COLOR_DDARK_GRAY);
	pbutton->SetAlignTextCM();
	pbutton->SetSizeImage(5, 5, size, size);
	pbutton->LoadImageFromResource(IDB_PNG_BUTTON_CIRCLE, TRUE);
}


HBRUSH CVAT_SimulatorDlg::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor)
{
	if (pWnd->GetDlgCtrlID() == IDC_EDIT_MODEL ||
		pWnd->GetDlgCtrlID() == IDC_EDIT_DLTIMEOUT ||
		pWnd->GetDlgCtrlID() == IDC_EDIT_MCTIMEOUT ||
		pWnd->GetDlgCtrlID() == IDC_EDIT_ATTTIMEOUT ||
		pWnd->GetDlgCtrlID() == IDC_COMBO_POSNAME ||
		pWnd->GetDlgCtrlID() == IDC_COMBO_EQPNAME )
	{
		pDC->SetBkColor(COLOR_UI_BODY);
		pDC->SetTextColor(COLOR_WHITE);
	}

	if (nCtlColor == CTLCOLOR_LISTBOX)
	{
		pDC->SetBkColor(COLOR_UI_BODY);
		pDC->SetTextColor(COLOR_WHITE);
	}
	return m_hbrBkg;
}

void CVAT_SimulatorDlg::OnBnClickedButtonConnect()
{
#ifdef _SDV_VAT
	CString m_modelName;
	GetDlgItem(IDC_EDIT_MODEL)->GetWindowText(m_modelName);
	m_pMain->m_classSamsungVATWraper.Agent_Initial((LPSTR)(LPCTSTR)m_modelName, "VisionVersion1.0");

	KillTimer(1);
	SetTimer(1, 1000, NULL);
#endif
}


void CVAT_SimulatorDlg::OnBnClickedButtonDisconnect()
{
#ifdef _SDV_VAT
	KillTimer(1);
	m_pMain->m_classSamsungVATWraper.Agent_Disconnect();	

	bool bconnect = m_pMain->m_classSamsungVATWraper.Agent_IsConnected();

	if (bconnect)
	{
		m_LbConnectStatus.SetText("Connected");
		m_LbConnectStatus.SetColorBkg(255, RGB(0, 255, 0));

		m_LbViewTitle.SetText("SDV VAT Simulator Check (" + m_pMain->m_classSamsungVATWraper.m_bLibVer + ")");
		::SendMessage(m_pMain->m_pPaneHeader->m_hWnd, WM_VIEW_CONTROL, MSG_VAT_CONNECT_STATUS_CONNECT, TRUE);
	}
	else
	{
		m_LbConnectStatus.SetText("DisConnected");
		m_LbConnectStatus.SetColorBkg(255, RGB(255, 0, 0));
		::SendMessage(m_pMain->m_pPaneHeader->m_hWnd, WM_VIEW_CONTROL, MSG_VAT_CONNECT_STATUS_CONNECT, FALSE);
	}
#endif
}


void CVAT_SimulatorDlg::OnBnClickedButtonReqdlagent()
{
#ifdef _SDV_VAT
	if (m_pImage.empty()) 
	{
		AfxMessageBox("Warning!! Select Image!");
		return;
	}

	CString error="Normal", model, posName, rst, _tact0;
	int timeout=1000, size, width, stride, height;
	byte* imgbytes = m_pImage.data;
		
	width = m_pImage.cols;
	height = m_pImage.rows;
	stride = m_pImage.cols;
	size = width* height;

	//딥러닝 결과 요청
	m_listLog.AddString("Request Deep Learning");

	GetDlgItem(IDC_EDIT_DLTIMEOUT)->GetWindowText(error);
	timeout = atoi(error);
	//Mark
	m_cmbSelectPosName.GetLBText(m_cmbSelectPosName.GetCurSel(), posName); // 값 가져오기

	if (posName.IsEmpty())
	{
		AfxMessageBox("Warning!! Select Position!");
		return;
	}


	GetDlgItem(IDC_EDIT_MODEL)->GetWindowText(model);	

	DLRst result0 = m_pMain->m_classSamsungVATWraper.Agent_ReqDL_Bytes("cellID0", ToolType_Mark, (LPSTR)(LPCTSTR)model, timeout, (LPSTR)(LPCTSTR)posName, imgbytes, size, width, stride, height, error);
	CTime time = CTime::GetCurrentTime();

	_tact0.Format("%2d: %2d : %2d ", time.GetHour(), time.GetMinute(),time.GetSecond());

	rst.Format("[%s] x: %4.4f, y: %4.4f, t: %4.4f, score: %4.4f, posName: %s , error: %s\n", _tact0, result0.X, result0.Y, result0.T, result0.Score, posName, error);
	m_listLog.AddString(rst);

#endif
}


void CVAT_SimulatorDlg::OnBnClickedButtonReqmodeldataCopy()
{
#ifdef _SDV_VAT

	m_pMain->m_pCircleProgress.StartProgress();
	m_pThread = AfxBeginThread(ProgressThread, this);		// 프로그레스바 쓰레드 시작
#endif
}


void CVAT_SimulatorDlg::OnBnClickedButtonReportmanualRst()
{
#ifdef _SDV_VAT

	CString error, model, posName, imagepath;
	ManualReason reason = ManualReason_Score;

	if (imagepath.IsEmpty())
	{
		CFileDialog dlg(TRUE, NULL, _T("Image File"), OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT,
			_T("Image Files (*.bmp;*.jpg;)|*.bmp;*.jpg|All Files (*.*)|*.*||"), this);

		if (dlg.DoModal() != IDOK)		return;

		imagepath = dlg.GetPathName();
	}

	m_listLog.AddString("Report Manual Rst_Mark");

	GetDlgItem(IDC_EDIT_MODEL)->GetWindowText(model);
	m_cmbSelectPosName.GetLBText(m_cmbSelectPosName.GetCurSel(), posName); // 값 가져오기

	if (posName.IsEmpty())
	{
		AfxMessageBox("Warning!! Select Position!");
		return;
	}

	m_pMain->m_classSamsungVATWraper.Agent_SendManualRst(1, 2, 3, 4, 5, 6, "cellID", (LPSTR)(LPCTSTR)model, (LPSTR)(LPCTSTR)posName, (LPSTR)(LPCTSTR)imagepath, reason, error);


#endif
}


void CVAT_SimulatorDlg::OnBnClickedButtonReportlogicRst()
{
#ifdef _SDV_VAT

	char description[MAX_PATH] = { 0, };
	CString error, model, posName, curtime, imagepath;
	m_listLog.AddString("Report Logic Rst_Mark");

	CTime t1 = CTime::GetCurrentTime();
	curtime = t1.Format("%H : %M: %S");

	GetDlgItem(IDC_EDIT_MODEL)->GetWindowText(model);
	m_cmbSelectPosName.GetLBText(m_cmbSelectPosName.GetCurSel(), posName); // 값 가져오기

	if (posName.IsEmpty())
	{
		AfxMessageBox("Warning!! Select Position!");
		return;
	}
	if (imagepath.IsEmpty())
	{
		CFileDialog dlg(TRUE, NULL, _T("Image File"), OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT,
			_T("Image Files (*.bmp;*.jpg;)|*.bmp;*.jpg|All Files (*.*)|*.*||"), this);

		if (dlg.DoModal() != IDOK)		return;

		imagepath = dlg.GetPathName();
	}
	
	m_pMain->m_classSamsungVATWraper.Agent_SendLogicRst((LPSTR)(LPCTSTR)curtime, "cellID", FindType_Logic_Mark, (LPSTR)(LPCTSTR)model, (LPSTR)(LPCTSTR)posName, (LPSTR)(LPCTSTR)imagepath,
		                                               Judge_OK, 1, 2, 3, 4, description);
#endif
}


void CVAT_SimulatorDlg::OnBnClickedButtonRequpdateAtt()
{
#ifdef _SDV_VAT
	CString posName, error, model;
	int att_timeout;
	Gdiplus::Bitmap* img=NULL;

	//골든마크 업데이트 요청
	m_listLog.AddString("Request Golden Mark Update");

	GetDlgItem(IDC_EDIT_ATTTIMEOUT)->GetWindowText(error);
	att_timeout = atoi(error);

	GetDlgItem(IDC_EDIT_MODEL)->GetWindowText(model);
	m_cmbSelectPosName.GetLBText(m_cmbSelectPosName.GetCurSel(), posName); // 값 가져오기

	if (posName.IsEmpty())
	{
		AfxMessageBox("Warning!! Select Position!");
		return;
	}

	if (img == NULL)
	{
		CFileDialog dlg(TRUE, NULL, _T("Image File"), OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT,
			_T("Image Files (*.bmp;*.jpg;)|*.bmp;*.jpg|All Files (*.*)|*.*||"), this);

		if (dlg.DoModal() != IDOK)		return;
		USES_CONVERSION;
		img = Gdiplus::Bitmap::FromFile(T2W(dlg.GetPathName().GetBuffer()));  

		if (img == NULL) return;
	}

	CString filePath = m_pMain->m_classSamsungVATWraper.Agent_ATTUpdate((LPSTR)(LPCTSTR)model, att_timeout, (LPSTR)(LPCTSTR)posName, img, error);

	m_listLog.AddString(filePath + "error: " + error);
#endif
}


void CVAT_SimulatorDlg::OnBnClickedButtonReportAllrst()
{
#ifdef _SDV_VAT

	//알고리즘 마지막 부분에서 전체 마크에 대한 결과를 보고한다 > 모니터링 용
	m_listLog.AddString("Report All Rst");

	CString  cellID, markPos;

	cellID = "Temp_XXXXTTXTXT";
	markPos = "U1_Upper_Object0";

	MarkFinderResult mfResults[4];

	mfResults[0].MFType = MarkFinderType_Vision_Mark;
	mfResults[0].Use = OnOff_ON;
	mfResults[0].Result = MarkFindResult_NG;
	mfResults[0].Lcheck = MarkFindResult_NG;

	mfResults[1].MFType = MarkFinderType_Golden_Mark;
	mfResults[1].Use = OnOff_ON;
	mfResults[1].Result = MarkFindResult_NG;
	mfResults[1].Lcheck = MarkFindResult_NG;

	mfResults[2].MFType = MarkFinderType_Deep_Learning;
	mfResults[2].Use = OnOff_ON;
	mfResults[2].Result = MarkFindResult_NG;
	mfResults[2].Lcheck = MarkFindResult_NG;

	mfResults[3].MFType = MarkFinderType_Manual_Align;
	mfResults[3].Use = OnOff_ON;
	mfResults[3].Result = MarkFindResult_OK;
	mfResults[3].Lcheck = MarkFindResult_OK;

	eErr_code err = m_pMain->m_classSamsungVATWraper.Agent_WriteMatchingHistoryLog(4, mfResults, eMarkFinderType(Vision_Mark), "processName", (LPSTR)(LPCTSTR)markPos, (LPSTR)(LPCTSTR)cellID);

	if (err != eErr_code(Nomal))
	{
		CString strText;
		strText.Format(_T("%d"), err);
		AfxMessageBox(strText);
	}

#endif
}


void CVAT_SimulatorDlg::OnBnClickedButtonGeteqpList()
{
#ifdef _SDV_VAT
	
#endif
}


void CVAT_SimulatorDlg::OnBnClickedButtonGetposList()
{
#ifdef _SDV_VAT
	
#endif
}


void CVAT_SimulatorDlg::OnBnClickedButtonMonitorLog()
{
#ifdef _SDV_VAT

#endif
}


void CVAT_SimulatorDlg::OnBnClickedButtonImageLoad()
{
#ifdef _SDV_VAT

	CFileDialog dlg(TRUE, NULL, _T("Image File"), OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT,
		_T("Image Files (*.bmp;*.jpg;)|*.bmp;*.jpg|All Files (*.*)|*.*||"), this);

	if (dlg.DoModal() != IDOK)		return;

	CString str = dlg.GetPathName();

	m_pImage = cv::imread(string(str), 0);

	if (m_pImage.empty())
	{
		AfxMessageBox("Check the Image Type");
		return;
	}
	
	m_listLog.AddString("Image Loaded");
#endif
}


void CVAT_SimulatorDlg::OnBnClickedButtonClearLog()
{
#ifdef _SDV_VAT
	m_listLog.ResetContent();
#endif
}


void CVAT_SimulatorDlg::OnEnSetfocusEditModel()
{
	SetFocus();

	CVirtualKeyBoard m_pKeyboardDlg;

	if (m_pKeyboardDlg.DoModal() != IDOK)
		return;

	CString strNumber;
	m_pKeyboardDlg.GetValue(strNumber);
	GetDlgItem(IDC_EDIT_MODEL)->SetWindowTextA(strNumber);

}


void CVAT_SimulatorDlg::OnEnSetfocusEditDltimeout()
{
	GetDlgItem(IDC_LB_DLTIMEOUT)->SetFocus();
	CString str, strTemp;
	GetDlgItem(IDC_EDIT_DLTIMEOUT)->GetWindowText(str);
	strTemp = m_pMain->GetNumberBox(str, 7, 0, 1000000);

	GetDlgItem(IDC_EDIT_DLTIMEOUT)->SetWindowTextA(strTemp);
}


void CVAT_SimulatorDlg::OnEnSetfocusEditMctimeout()
{
	GetDlgItem(IDC_LB_MC_TIMEOUT)->SetFocus();
	CString str, strTemp;
	GetDlgItem(IDC_EDIT_MCTIMEOUT)->GetWindowText(str);
	strTemp = m_pMain->GetNumberBox(str, 7, 0, 1000000);

	GetDlgItem(IDC_EDIT_MCTIMEOUT)->SetWindowTextA(strTemp);
}


void CVAT_SimulatorDlg::OnEnSetfocusEditAtttimeout()
{
	GetDlgItem(IDC_LB_MC_TIMEOUT)->SetFocus();
	CString str, strTemp;
	GetDlgItem(IDC_EDIT_ATTTIMEOUT)->GetWindowText(str);
	strTemp = m_pMain->GetNumberBox(str, 7, 0, 1000000);

	GetDlgItem(IDC_EDIT_ATTTIMEOUT)->SetWindowTextA(strTemp);
}


void CVAT_SimulatorDlg::OnTimer(UINT_PTR nIDEvent)
{
#ifdef _SDV_VAT

	bool bconnect = m_pMain->m_classSamsungVATWraper.Agent_IsConnected();
	CString text = m_LbConnectStatus.GetText();

	if (bconnect && text !="Connected")
	{
		m_LbConnectStatus.SetText("Connected");
		m_LbConnectStatus.SetColorBkg(255, RGB(0, 255, 0));		
		m_LbViewTitle.SetText("SDV VAT Simulator Check (" + m_pMain->m_classSamsungVATWraper.m_bLibVer + ")");
		::SendMessage(m_pMain->m_pPaneHeader->m_hWnd, WM_VIEW_CONTROL, MSG_VAT_CONNECT_STATUS_CONNECT, TRUE);
	}
	else if(!bconnect && text != "DisConnected")
	{
		m_LbConnectStatus.SetText("DisConnected");
		m_LbConnectStatus.SetColorBkg(255, RGB(255, 0, 0));
		::SendMessage(m_pMain->m_pPaneHeader->m_hWnd, WM_VIEW_CONTROL, MSG_VAT_CONNECT_STATUS_CONNECT, FALSE);
	}
#endif
	CDialogEx::OnTimer(nIDEvent);
}

void CVAT_SimulatorDlg::InitEQPList()
{
#ifdef _SDV_VAT
	m_cmbSelectEqpName.ResetContent();
	m_vEQPList.clear();

	ifstream fin;
	fin.open(Path_EqpList);

	std::vector<string> strEQP;
	string line;
	while (!fin.eof())
	{
		getline(fin, line);
		strEQP.push_back(line);
	}

	fin.close();


	for (int i = 0; i < strEQP.size(); i++)
	{
		m_cmbSelectEqpName.AddString(strEQP[i].c_str());
		m_vEQPList.push_back(strEQP[i].c_str());
	}

	if(m_vEQPList.size())	m_cmbSelectEqpName.SetCurSel(0);
#endif
}

void CVAT_SimulatorDlg::InitPosList()
{
#ifdef _SDV_VAT
	m_cmbSelectPosName.ResetContent();
	m_vPosNameList.clear();

	ifstream fin;
	fin.open(Path_PosList);

	std::vector<string> strPosName;
	string line;
	while (!fin.eof())
	{
		getline(fin, line);
		strPosName.push_back(line);
	}

	fin.close();


	for (int i = 0; i < strPosName.size(); i++)
	{
		m_cmbSelectPosName.AddString(strPosName[i].c_str());
		m_vPosNameList.push_back(strPosName[i].c_str());
	}

	if (m_vPosNameList.size())	m_cmbSelectPosName.SetCurSel(0);
#endif
}


void CVAT_SimulatorDlg::OnBnClickedButtonCopyCancle()
{
#ifdef _SDV_VAT
	m_pMain->m_pCircleProgress.StopProgress();
	m_pMain->m_classSamsungVATWraper.Agent_SetModelCopyCancel(true);
#endif
}

UINT CVAT_SimulatorDlg::ProgressThread(LPVOID lpParam)
{
	// 프로그레스바
	CVAT_SimulatorDlg* pModelCopyDlg = (CVAT_SimulatorDlg*)lpParam;

#ifdef _SDV_VAT
	CString error, destpath, eqp, model;
	int mc_timeout;

	//모델 복사 요청
	pModelCopyDlg->m_listLog.AddString("Request Model Copy");

	destpath = "D:\\Agent\\ModelData"; //복사해 올 모델 파일 위치

	pModelCopyDlg->GetDlgItem(IDC_EDIT_MCTIMEOUT)->GetWindowText(error);
	mc_timeout = atoi(error);
	pModelCopyDlg->GetDlgItem(IDC_EDIT_MODEL)->GetWindowText(model);
	pModelCopyDlg->m_cmbSelectEqpName.GetLBText(pModelCopyDlg->m_cmbSelectEqpName.GetCurSel(), eqp); // 값 가져오기

	if (eqp.IsEmpty())
	{
		AfxMessageBox("Warning!! Select EQP!");
		return TRUE;
	}

	CString filePath = pModelCopyDlg->m_pMain->m_classSamsungVATWraper.Agent_ModelCopy((LPSTR)(LPCTSTR)model, mc_timeout, (LPSTR)(LPCTSTR)destpath, (LPSTR)(LPCTSTR)eqp, error);

	pModelCopyDlg->m_listLog.AddString(filePath + "error: " + error);
	pModelCopyDlg->m_pMain->m_pCircleProgress.StopProgress();
#endif

	return TRUE;
}

void CVAT_SimulatorDlg::OnClose()
{
	KillTimer(1);

	Sleep(1500);

	CDialogEx::OnClose();
}
